"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

type Query {
  documents: [Document!]!
  markers: [Marker!]!
  notifications: [Notification!]!
  photos: [Photo!]!
}

type Mutation {
  seed: Byte
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Photo {
  caption: String
  folder: String!
  path: String!
  id: UUID!
  created: DateTime!
}

type Notification {
  title: String!
  content: String!
  id: UUID!
  created: DateTime!
}

type Marker {
  name: String
  number: Byte
  type: MarkerType!
  id: UUID!
  created: DateTime!
}

type Document {
  title: String!
  id: UUID!
  created: DateTime!
}

"""
The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
"""
scalar Byte

enum MarkerType {
  WATCHTOWER
  SALTBASE
  FEEDER
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

scalar UUID
